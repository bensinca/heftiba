{"id":"ez7q","dependencies":[{"name":"/home/beni/Documents/web/andu/package.json","includedInParent":true,"mtime":1606241754305},{"name":"/home/beni/Documents/web/andu/node_modules/locomotive-scroll/package.json","includedInParent":true,"mtime":1606164728189},{"name":"/home/beni/Documents/web/andu/node_modules/locomotive-scroll/.browserslistrc","includedInParent":true,"mtime":499162500000}],"generated":{"js":"var global = arguments[3];\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/* locomotive-scroll v3.6.1 | MIT License | https://github.com/locomotivemtl/locomotive-scroll */\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nvar defaults = {\n  el: document,\n  elMobile: document,\n  name: 'scroll',\n  offset: [0, 0],\n  repeat: false,\n  smooth: false,\n  smoothMobile: false,\n  direction: 'vertical',\n  lerp: 0.1,\n  \"class\": 'is-inview',\n  scrollbarContainer: false,\n  scrollbarClass: 'c-scrollbar',\n  scrollingClass: 'has-scroll-scrolling',\n  draggingClass: 'has-scroll-dragging',\n  smoothClass: 'has-scroll-smooth',\n  initClass: 'has-scroll-init',\n  getSpeed: false,\n  getDirection: false,\n  multiplier: 1,\n  firefoxMultiplier: 50,\n  touchMultiplier: 2,\n  scrollFromAnywhere: false\n};\n\nvar _default = /*#__PURE__*/function () {\n  function _default() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, _default);\n\n    Object.assign(this, defaults, options);\n    this.namespace = 'locomotive';\n    this.html = document.documentElement;\n    this.windowHeight = window.innerHeight;\n    this.windowMiddle = this.windowHeight / 2;\n    this.els = [];\n    this.listeners = {};\n    this.hasScrollTicking = false;\n    this.hasCallEventSet = false;\n    this.checkScroll = this.checkScroll.bind(this);\n    this.checkResize = this.checkResize.bind(this);\n    this.checkEvent = this.checkEvent.bind(this);\n    this.instance = {\n      scroll: {\n        x: 0,\n        y: 0\n      },\n      limit: this.html.offsetHeight\n    };\n\n    if (this.getDirection) {\n      this.instance.direction = null;\n    }\n\n    if (this.getDirection) {\n      this.instance.speed = 0;\n    }\n\n    this.html.classList.add(this.initClass);\n    window.addEventListener('resize', this.checkResize, false);\n  }\n\n  _createClass(_default, [{\n    key: \"init\",\n    value: function init() {\n      this.initEvents();\n    }\n  }, {\n    key: \"checkScroll\",\n    value: function checkScroll() {\n      this.dispatchScroll();\n    }\n  }, {\n    key: \"checkResize\",\n    value: function checkResize() {\n      var _this = this;\n\n      if (!this.resizeTick) {\n        this.resizeTick = true;\n        requestAnimationFrame(function () {\n          _this.resize();\n\n          _this.resizeTick = false;\n        });\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {}\n  }, {\n    key: \"initEvents\",\n    value: function initEvents() {\n      var _this2 = this;\n\n      this.scrollToEls = this.el.querySelectorAll(\"[data-\".concat(this.name, \"-to]\"));\n      this.setScrollTo = this.setScrollTo.bind(this);\n      this.scrollToEls.forEach(function (el) {\n        el.addEventListener('click', _this2.setScrollTo, false);\n      });\n    }\n  }, {\n    key: \"setScrollTo\",\n    value: function setScrollTo(event) {\n      event.preventDefault();\n      this.scrollTo(event.currentTarget.getAttribute(\"data-\".concat(this.name, \"-href\")) || event.currentTarget.getAttribute('href'), event.currentTarget.getAttribute(\"data-\".concat(this.name, \"-offset\")));\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {}\n  }, {\n    key: \"detectElements\",\n    value: function detectElements(hasCallEventSet) {\n      var _this3 = this;\n\n      var scrollTop = this.instance.scroll.y;\n      var scrollBottom = scrollTop + this.windowHeight;\n      this.els.forEach(function (el, i) {\n        if (el && (!el.inView || hasCallEventSet)) {\n          if (scrollBottom >= el.top && scrollTop < el.bottom) {\n            _this3.setInView(el, i);\n          }\n        }\n\n        if (el && el.inView) {\n          if (scrollBottom < el.top || scrollTop > el.bottom) {\n            _this3.setOutOfView(el, i);\n          }\n        }\n      });\n      this.els = this.els.filter(function (current, i) {\n        return current !== null;\n      });\n      this.hasScrollTicking = false;\n    }\n  }, {\n    key: \"setInView\",\n    value: function setInView(current, i) {\n      this.els[i].inView = true;\n      current.el.classList.add(current[\"class\"]);\n\n      if (current.call && this.hasCallEventSet) {\n        this.dispatchCall(current, 'enter');\n\n        if (!current.repeat) {\n          this.els[i].call = false;\n        }\n      }\n\n      if (!current.repeat && !current.speed && !current.sticky) {\n        if (!current.call || current.call && this.hasCallEventSet) {\n          this.els[i] = null;\n        }\n      }\n    }\n  }, {\n    key: \"setOutOfView\",\n    value: function setOutOfView(current, i) {\n      if (current.repeat || current.speed !== undefined) {\n        this.els[i].inView = false;\n      }\n\n      if (current.call && this.hasCallEventSet) {\n        this.dispatchCall(current, 'exit');\n      }\n\n      if (current.repeat) {\n        current.el.classList.remove(current[\"class\"]);\n      }\n    }\n  }, {\n    key: \"dispatchCall\",\n    value: function dispatchCall(current, way) {\n      this.callWay = way;\n      this.callValue = current.call.split(',').map(function (item) {\n        return item.trim();\n      });\n      this.callObj = current;\n      if (this.callValue.length == 1) this.callValue = this.callValue[0];\n      var callEvent = new Event(this.namespace + 'call');\n      this.el.dispatchEvent(callEvent);\n    }\n  }, {\n    key: \"dispatchScroll\",\n    value: function dispatchScroll() {\n      var scrollEvent = new Event(this.namespace + 'scroll');\n      this.el.dispatchEvent(scrollEvent);\n    }\n  }, {\n    key: \"setEvents\",\n    value: function setEvents(event, func) {\n      if (!this.listeners[event]) {\n        this.listeners[event] = [];\n      }\n\n      var list = this.listeners[event];\n      list.push(func);\n\n      if (list.length === 1) {\n        this.el.addEventListener(this.namespace + event, this.checkEvent, false);\n      }\n\n      if (event === 'call') {\n        this.hasCallEventSet = true;\n        this.detectElements(true);\n      }\n    }\n  }, {\n    key: \"unsetEvents\",\n    value: function unsetEvents(event, func) {\n      if (!this.listeners[event]) return;\n      var list = this.listeners[event];\n      var index = list.indexOf(func);\n      if (index < 0) return;\n      list.splice(index, 1);\n\n      if (list.index === 0) {\n        this.el.removeEventListener(this.namespace + event, this.checkEvent, false);\n      }\n    }\n  }, {\n    key: \"checkEvent\",\n    value: function checkEvent(event) {\n      var _this4 = this;\n\n      var name = event.type.replace(this.namespace, '');\n      var list = this.listeners[name];\n      if (!list || list.length === 0) return;\n      list.forEach(function (func) {\n        switch (name) {\n          case 'scroll':\n            return func(_this4.instance);\n\n          case 'call':\n            return func(_this4.callValue, _this4.callWay, _this4.callObj);\n\n          default:\n            return func();\n        }\n      });\n    }\n  }, {\n    key: \"startScroll\",\n    value: function startScroll() {}\n  }, {\n    key: \"stopScroll\",\n    value: function stopScroll() {}\n  }, {\n    key: \"setScroll\",\n    value: function setScroll(x, y) {\n      this.instance.scroll = {\n        x: 0,\n        y: 0\n      };\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this5 = this;\n\n      window.removeEventListener('resize', this.checkResize, false);\n      Object.keys(this.listeners).forEach(function (event) {\n        _this5.el.removeEventListener(_this5.namespace + event, _this5.checkEvent, false);\n      });\n      this.listeners = {};\n      this.scrollToEls.forEach(function (el) {\n        el.removeEventListener('click', _this5.setScrollTo, false);\n      });\n    }\n  }]);\n\n  return _default;\n}();\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar smoothscroll = createCommonjsModule(function (module, exports) {\n  /* smoothscroll v0.4.4 - 2019 - Dustan Kasten, Jeremias Menichelli - MIT License */\n  (function () {\n    // polyfill\n    function polyfill() {\n      // aliases\n      var w = window;\n      var d = document; // return if scroll behavior is supported and polyfill is not forced\n\n      if ('scrollBehavior' in d.documentElement.style && w.__forceSmoothScrollPolyfill__ !== true) {\n        return;\n      } // globals\n\n\n      var Element = w.HTMLElement || w.Element;\n      var SCROLL_TIME = 468; // object gathering original scroll methods\n\n      var original = {\n        scroll: w.scroll || w.scrollTo,\n        scrollBy: w.scrollBy,\n        elementScroll: Element.prototype.scroll || scrollElement,\n        scrollIntoView: Element.prototype.scrollIntoView\n      }; // define timing method\n\n      var now = w.performance && w.performance.now ? w.performance.now.bind(w.performance) : Date.now;\n      /**\n       * indicates if a the current browser is made by Microsoft\n       * @method isMicrosoftBrowser\n       * @param {String} userAgent\n       * @returns {Boolean}\n       */\n\n      function isMicrosoftBrowser(userAgent) {\n        var userAgentPatterns = ['MSIE ', 'Trident/', 'Edge/'];\n        return new RegExp(userAgentPatterns.join('|')).test(userAgent);\n      }\n      /*\n       * IE has rounding bug rounding down clientHeight and clientWidth and\n       * rounding up scrollHeight and scrollWidth causing false positives\n       * on hasScrollableSpace\n       */\n\n\n      var ROUNDING_TOLERANCE = isMicrosoftBrowser(w.navigator.userAgent) ? 1 : 0;\n      /**\n       * changes scroll position inside an element\n       * @method scrollElement\n       * @param {Number} x\n       * @param {Number} y\n       * @returns {undefined}\n       */\n\n      function scrollElement(x, y) {\n        this.scrollLeft = x;\n        this.scrollTop = y;\n      }\n      /**\n       * returns result of applying ease math function to a number\n       * @method ease\n       * @param {Number} k\n       * @returns {Number}\n       */\n\n\n      function ease(k) {\n        return 0.5 * (1 - Math.cos(Math.PI * k));\n      }\n      /**\n       * indicates if a smooth behavior should be applied\n       * @method shouldBailOut\n       * @param {Number|Object} firstArg\n       * @returns {Boolean}\n       */\n\n\n      function shouldBailOut(firstArg) {\n        if (firstArg === null || typeof firstArg !== 'object' || firstArg.behavior === undefined || firstArg.behavior === 'auto' || firstArg.behavior === 'instant') {\n          // first argument is not an object/null\n          // or behavior is auto, instant or undefined\n          return true;\n        }\n\n        if (typeof firstArg === 'object' && firstArg.behavior === 'smooth') {\n          // first argument is an object and behavior is smooth\n          return false;\n        } // throw error when behavior is not supported\n\n\n        throw new TypeError('behavior member of ScrollOptions ' + firstArg.behavior + ' is not a valid value for enumeration ScrollBehavior.');\n      }\n      /**\n       * indicates if an element has scrollable space in the provided axis\n       * @method hasScrollableSpace\n       * @param {Node} el\n       * @param {String} axis\n       * @returns {Boolean}\n       */\n\n\n      function hasScrollableSpace(el, axis) {\n        if (axis === 'Y') {\n          return el.clientHeight + ROUNDING_TOLERANCE < el.scrollHeight;\n        }\n\n        if (axis === 'X') {\n          return el.clientWidth + ROUNDING_TOLERANCE < el.scrollWidth;\n        }\n      }\n      /**\n       * indicates if an element has a scrollable overflow property in the axis\n       * @method canOverflow\n       * @param {Node} el\n       * @param {String} axis\n       * @returns {Boolean}\n       */\n\n\n      function canOverflow(el, axis) {\n        var overflowValue = w.getComputedStyle(el, null)['overflow' + axis];\n        return overflowValue === 'auto' || overflowValue === 'scroll';\n      }\n      /**\n       * indicates if an element can be scrolled in either axis\n       * @method isScrollable\n       * @param {Node} el\n       * @param {String} axis\n       * @returns {Boolean}\n       */\n\n\n      function isScrollable(el) {\n        var isScrollableY = hasScrollableSpace(el, 'Y') && canOverflow(el, 'Y');\n        var isScrollableX = hasScrollableSpace(el, 'X') && canOverflow(el, 'X');\n        return isScrollableY || isScrollableX;\n      }\n      /**\n       * finds scrollable parent of an element\n       * @method findScrollableParent\n       * @param {Node} el\n       * @returns {Node} el\n       */\n\n\n      function findScrollableParent(el) {\n        while (el !== d.body && isScrollable(el) === false) {\n          el = el.parentNode || el.host;\n        }\n\n        return el;\n      }\n      /**\n       * self invoked function that, given a context, steps through scrolling\n       * @method step\n       * @param {Object} context\n       * @returns {undefined}\n       */\n\n\n      function step(context) {\n        var time = now();\n        var value;\n        var currentX;\n        var currentY;\n        var elapsed = (time - context.startTime) / SCROLL_TIME; // avoid elapsed times higher than one\n\n        elapsed = elapsed > 1 ? 1 : elapsed; // apply easing to elapsed time\n\n        value = ease(elapsed);\n        currentX = context.startX + (context.x - context.startX) * value;\n        currentY = context.startY + (context.y - context.startY) * value;\n        context.method.call(context.scrollable, currentX, currentY); // scroll more if we have not reached our destination\n\n        if (currentX !== context.x || currentY !== context.y) {\n          w.requestAnimationFrame(step.bind(w, context));\n        }\n      }\n      /**\n       * scrolls window or element with a smooth behavior\n       * @method smoothScroll\n       * @param {Object|Node} el\n       * @param {Number} x\n       * @param {Number} y\n       * @returns {undefined}\n       */\n\n\n      function smoothScroll(el, x, y) {\n        var scrollable;\n        var startX;\n        var startY;\n        var method;\n        var startTime = now(); // define scroll context\n\n        if (el === d.body) {\n          scrollable = w;\n          startX = w.scrollX || w.pageXOffset;\n          startY = w.scrollY || w.pageYOffset;\n          method = original.scroll;\n        } else {\n          scrollable = el;\n          startX = el.scrollLeft;\n          startY = el.scrollTop;\n          method = scrollElement;\n        } // scroll looping over a frame\n\n\n        step({\n          scrollable: scrollable,\n          method: method,\n          startTime: startTime,\n          startX: startX,\n          startY: startY,\n          x: x,\n          y: y\n        });\n      } // ORIGINAL METHODS OVERRIDES\n      // w.scroll and w.scrollTo\n\n\n      w.scroll = w.scrollTo = function () {\n        // avoid action when no arguments are passed\n        if (arguments[0] === undefined) {\n          return;\n        } // avoid smooth behavior if not required\n\n\n        if (shouldBailOut(arguments[0]) === true) {\n          original.scroll.call(w, arguments[0].left !== undefined ? arguments[0].left : typeof arguments[0] !== 'object' ? arguments[0] : w.scrollX || w.pageXOffset, // use top prop, second argument if present or fallback to scrollY\n          arguments[0].top !== undefined ? arguments[0].top : arguments[1] !== undefined ? arguments[1] : w.scrollY || w.pageYOffset);\n          return;\n        } // LET THE SMOOTHNESS BEGIN!\n\n\n        smoothScroll.call(w, d.body, arguments[0].left !== undefined ? ~~arguments[0].left : w.scrollX || w.pageXOffset, arguments[0].top !== undefined ? ~~arguments[0].top : w.scrollY || w.pageYOffset);\n      }; // w.scrollBy\n\n\n      w.scrollBy = function () {\n        // avoid action when no arguments are passed\n        if (arguments[0] === undefined) {\n          return;\n        } // avoid smooth behavior if not required\n\n\n        if (shouldBailOut(arguments[0])) {\n          original.scrollBy.call(w, arguments[0].left !== undefined ? arguments[0].left : typeof arguments[0] !== 'object' ? arguments[0] : 0, arguments[0].top !== undefined ? arguments[0].top : arguments[1] !== undefined ? arguments[1] : 0);\n          return;\n        } // LET THE SMOOTHNESS BEGIN!\n\n\n        smoothScroll.call(w, d.body, ~~arguments[0].left + (w.scrollX || w.pageXOffset), ~~arguments[0].top + (w.scrollY || w.pageYOffset));\n      }; // Element.prototype.scroll and Element.prototype.scrollTo\n\n\n      Element.prototype.scroll = Element.prototype.scrollTo = function () {\n        // avoid action when no arguments are passed\n        if (arguments[0] === undefined) {\n          return;\n        } // avoid smooth behavior if not required\n\n\n        if (shouldBailOut(arguments[0]) === true) {\n          // if one number is passed, throw error to match Firefox implementation\n          if (typeof arguments[0] === 'number' && arguments[1] === undefined) {\n            throw new SyntaxError('Value could not be converted');\n          }\n\n          original.elementScroll.call(this, // use left prop, first number argument or fallback to scrollLeft\n          arguments[0].left !== undefined ? ~~arguments[0].left : typeof arguments[0] !== 'object' ? ~~arguments[0] : this.scrollLeft, // use top prop, second argument or fallback to scrollTop\n          arguments[0].top !== undefined ? ~~arguments[0].top : arguments[1] !== undefined ? ~~arguments[1] : this.scrollTop);\n          return;\n        }\n\n        var left = arguments[0].left;\n        var top = arguments[0].top; // LET THE SMOOTHNESS BEGIN!\n\n        smoothScroll.call(this, this, typeof left === 'undefined' ? this.scrollLeft : ~~left, typeof top === 'undefined' ? this.scrollTop : ~~top);\n      }; // Element.prototype.scrollBy\n\n\n      Element.prototype.scrollBy = function () {\n        // avoid action when no arguments are passed\n        if (arguments[0] === undefined) {\n          return;\n        } // avoid smooth behavior if not required\n\n\n        if (shouldBailOut(arguments[0]) === true) {\n          original.elementScroll.call(this, arguments[0].left !== undefined ? ~~arguments[0].left + this.scrollLeft : ~~arguments[0] + this.scrollLeft, arguments[0].top !== undefined ? ~~arguments[0].top + this.scrollTop : ~~arguments[1] + this.scrollTop);\n          return;\n        }\n\n        this.scroll({\n          left: ~~arguments[0].left + this.scrollLeft,\n          top: ~~arguments[0].top + this.scrollTop,\n          behavior: arguments[0].behavior\n        });\n      }; // Element.prototype.scrollIntoView\n\n\n      Element.prototype.scrollIntoView = function () {\n        // avoid smooth behavior if not required\n        if (shouldBailOut(arguments[0]) === true) {\n          original.scrollIntoView.call(this, arguments[0] === undefined ? true : arguments[0]);\n          return;\n        } // LET THE SMOOTHNESS BEGIN!\n\n\n        var scrollableParent = findScrollableParent(this);\n        var parentRects = scrollableParent.getBoundingClientRect();\n        var clientRects = this.getBoundingClientRect();\n\n        if (scrollableParent !== d.body) {\n          // reveal element inside parent\n          smoothScroll.call(this, scrollableParent, scrollableParent.scrollLeft + clientRects.left - parentRects.left, scrollableParent.scrollTop + clientRects.top - parentRects.top); // reveal parent in viewport unless is fixed\n\n          if (w.getComputedStyle(scrollableParent).position !== 'fixed') {\n            w.scrollBy({\n              left: parentRects.left,\n              top: parentRects.top,\n              behavior: 'smooth'\n            });\n          }\n        } else {\n          // reveal element in viewport\n          w.scrollBy({\n            left: clientRects.left,\n            top: clientRects.top,\n            behavior: 'smooth'\n          });\n        }\n      };\n    }\n\n    {\n      // commonjs\n      module.exports = {\n        polyfill: polyfill\n      };\n    }\n  })();\n});\nvar smoothscroll_1 = smoothscroll.polyfill;\n\nvar _default$1 = /*#__PURE__*/function (_Core) {\n  _inherits(_default, _Core);\n\n  function _default() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, _default);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_default).call(this, options));\n    window.addEventListener('scroll', _this.checkScroll, false);\n    smoothscroll.polyfill();\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"init\",\n    value: function init() {\n      this.instance.scroll.y = window.pageYOffset;\n      this.addElements();\n      this.detectElements();\n\n      _get(_getPrototypeOf(_default.prototype), \"init\", this).call(this);\n    }\n  }, {\n    key: \"checkScroll\",\n    value: function checkScroll() {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(_default.prototype), \"checkScroll\", this).call(this);\n\n      if (this.getDirection) {\n        this.addDirection();\n      }\n\n      if (this.getSpeed) {\n        this.addSpeed();\n        this.timestamp = Date.now();\n      }\n\n      this.instance.scroll.y = window.pageYOffset;\n\n      if (this.els.length) {\n        if (!this.hasScrollTicking) {\n          requestAnimationFrame(function () {\n            _this2.detectElements();\n          });\n          this.hasScrollTicking = true;\n        }\n      }\n    }\n  }, {\n    key: \"addDirection\",\n    value: function addDirection() {\n      if (window.pageYOffset > this.instance.scroll.y) {\n        if (this.instance.direction !== 'down') {\n          this.instance.direction = 'down';\n        }\n      } else if (window.pageYOffset < this.instance.scroll.y) {\n        if (this.instance.direction !== 'up') {\n          this.instance.direction = 'up';\n        }\n      }\n    }\n  }, {\n    key: \"addSpeed\",\n    value: function addSpeed() {\n      if (window.pageYOffset != this.instance.scroll.y) {\n        this.instance.speed = (window.pageYOffset - this.instance.scroll.y) / (Date.now() - this.timestamp);\n      } else {\n        this.instance.speed = 0;\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (this.els.length) {\n        this.windowHeight = window.innerHeight;\n        this.updateElements();\n      }\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      var _this3 = this;\n\n      this.els = [];\n      var els = this.el.querySelectorAll('[data-' + this.name + ']');\n      els.forEach(function (el, id) {\n        var cl = el.dataset[_this3.name + 'Class'] || _this3[\"class\"];\n\n        var top = el.getBoundingClientRect().top + _this3.instance.scroll.y;\n\n        var bottom = top + el.offsetHeight;\n        var offset = typeof el.dataset[_this3.name + 'Offset'] === 'string' ? el.dataset[_this3.name + 'Offset'].split(',') : _this3.offset;\n        var repeat = el.dataset[_this3.name + 'Repeat'];\n        var call = el.dataset[_this3.name + 'Call'];\n\n        if (repeat == 'false') {\n          repeat = false;\n        } else if (repeat != undefined) {\n          repeat = true;\n        } else {\n          repeat = _this3.repeat;\n        }\n\n        var relativeOffset = _this3.getRelativeOffset(offset);\n\n        var mappedEl = {\n          el: el,\n          id: id,\n          \"class\": cl,\n          top: top + relativeOffset[0],\n          bottom: bottom - relativeOffset[1],\n          offset: offset,\n          repeat: repeat,\n          inView: el.classList.contains(cl) ? true : false,\n          call: call\n        };\n\n        _this3.els.push(mappedEl);\n      });\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements() {\n      var _this4 = this;\n\n      this.els.forEach(function (el, i) {\n        var top = el.el.getBoundingClientRect().top + _this4.instance.scroll.y;\n\n        var bottom = top + el.el.offsetHeight;\n\n        var relativeOffset = _this4.getRelativeOffset(el.offset);\n\n        _this4.els[i].top = top + relativeOffset[0];\n        _this4.els[i].bottom = bottom - relativeOffset[1];\n      });\n      this.hasScrollTicking = false;\n    }\n  }, {\n    key: \"getRelativeOffset\",\n    value: function getRelativeOffset(offset) {\n      var relativeOffset = [0, 0];\n\n      if (offset) {\n        for (var i = 0; i < offset.length; i++) {\n          if (typeof offset[i] == 'string') {\n            if (offset[i].includes('%')) {\n              relativeOffset[i] = parseInt(offset[i].replace('%', '') * this.windowHeight / 100);\n            } else {\n              relativeOffset[i] = parseInt(offset[i]);\n            }\n          } else {\n            relativeOffset[i] = offset[i];\n          }\n        }\n      }\n\n      return relativeOffset;\n    }\n    /**\n     * Scroll to a desired target.\n     *\n     * @param  Available options :\n     *          targetOption {node, string, \"top\", \"bottom\", int} - The DOM element we want to scroll to\n     *          offsetOption {int} - An absolute vertical scroll value to reach, or an offset to apply on top of given `target` or `sourceElem`'s target\n     * @return {void}\n     */\n\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(targetOption, offsetOption, duration, easing, disableLerp, callback) {\n      // TODO - In next breaking update, use an object as 2nd parameter for options (offset, duration, easing, disableLerp, callback)\n      var target;\n      var offset = offsetOption ? parseInt(offsetOption) : 0;\n\n      if (typeof targetOption === 'string') {\n        // Selector or boundaries\n        if (targetOption === 'top') {\n          target = this.html;\n        } else if (targetOption === 'bottom') {\n          target = this.html.offsetHeight - window.innerHeight;\n        } else {\n          target = document.querySelector(targetOption); // If the query fails, abort\n\n          if (!target) {\n            return;\n          }\n        }\n      } else if (typeof targetOption === 'number') {\n        // Absolute coordinate\n        target = parseInt(targetOption);\n      } else if (targetOption && targetOption.tagName) {\n        // DOM Element\n        target = targetOption;\n      } else {\n        console.warn('`targetOption` parameter is not valid');\n        return;\n      } // We have a target that is not a coordinate yet, get it\n\n\n      if (typeof target !== 'number') {\n        offset = target.getBoundingClientRect().top + offset + this.instance.scroll.y;\n      } else {\n        offset = target + offset;\n      }\n\n      if (callback) {\n        offset = offset.toFixed();\n\n        var onScroll = function onScroll() {\n          if (window.pageYOffset.toFixed() === offset) {\n            window.removeEventListener('scroll', onScroll);\n            callback();\n          }\n        };\n\n        window.addEventListener('scroll', onScroll);\n      }\n\n      window.scrollTo({\n        top: offset,\n        behavior: 'smooth'\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.addElements();\n      this.detectElements();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(_default.prototype), \"destroy\", this).call(this);\n\n      window.removeEventListener('scroll', this.checkScroll, false);\n    }\n  }]);\n\n  return _default;\n}(_default);\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n/* eslint-disable no-unused-vars */\n\n\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n\n  return Object(val);\n}\n\nfunction shouldUseNative() {\n  try {\n    if (!Object.assign) {\n      return false;\n    } // Detect buggy property enumeration order in older V8 versions.\n    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n    test1[5] = 'de';\n\n    if (Object.getOwnPropertyNames(test1)[0] === '5') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test2 = {};\n\n    for (var i = 0; i < 10; i++) {\n      test2['_' + String.fromCharCode(i)] = i;\n    }\n\n    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n      return test2[n];\n    });\n\n    if (order2.join('') !== '0123456789') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test3 = {};\n    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n      test3[letter] = letter;\n    });\n\n    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    // We don't expect any of the above to throw, but better to be safe.\n    return false;\n  }\n}\n\nvar objectAssign = shouldUseNative() ? Object.assign : function (target, source) {\n  var from;\n  var to = toObject(target);\n  var symbols;\n\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n\n    if (getOwnPropertySymbols) {\n      symbols = getOwnPropertySymbols(from);\n\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n\n  return to;\n};\n\nfunction E() {// Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n    return this;\n  },\n  once: function (name, callback, ctx) {\n    var self = this;\n\n    function listener() {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    }\n\n    listener._ = callback;\n    return this.on(name, listener, ctx);\n  },\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);\n      }\n    } // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n\n    liveEvents.length ? e[name] = liveEvents : delete e[name];\n    return this;\n  }\n};\nvar tinyEmitter = E;\nvar lethargy = createCommonjsModule(function (module, exports) {\n  // Generated by CoffeeScript 1.9.2\n  (function () {\n    var root;\n    root = exports !== null ? exports : this;\n\n    root.Lethargy = function () {\n      function Lethargy(stability, sensitivity, tolerance, delay) {\n        this.stability = stability != null ? Math.abs(stability) : 8;\n        this.sensitivity = sensitivity != null ? 1 + Math.abs(sensitivity) : 100;\n        this.tolerance = tolerance != null ? 1 + Math.abs(tolerance) : 1.1;\n        this.delay = delay != null ? delay : 150;\n\n        this.lastUpDeltas = function () {\n          var i, ref, results;\n          results = [];\n\n          for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {\n            results.push(null);\n          }\n\n          return results;\n        }.call(this);\n\n        this.lastDownDeltas = function () {\n          var i, ref, results;\n          results = [];\n\n          for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {\n            results.push(null);\n          }\n\n          return results;\n        }.call(this);\n\n        this.deltasTimestamp = function () {\n          var i, ref, results;\n          results = [];\n\n          for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {\n            results.push(null);\n          }\n\n          return results;\n        }.call(this);\n      }\n\n      Lethargy.prototype.check = function (e) {\n        var lastDelta;\n        e = e.originalEvent || e;\n\n        if (e.wheelDelta != null) {\n          lastDelta = e.wheelDelta;\n        } else if (e.deltaY != null) {\n          lastDelta = e.deltaY * -40;\n        } else if (e.detail != null || e.detail === 0) {\n          lastDelta = e.detail * -40;\n        }\n\n        this.deltasTimestamp.push(Date.now());\n        this.deltasTimestamp.shift();\n\n        if (lastDelta > 0) {\n          this.lastUpDeltas.push(lastDelta);\n          this.lastUpDeltas.shift();\n          return this.isInertia(1);\n        } else {\n          this.lastDownDeltas.push(lastDelta);\n          this.lastDownDeltas.shift();\n          return this.isInertia(-1);\n        }\n      };\n\n      Lethargy.prototype.isInertia = function (direction) {\n        var lastDeltas, lastDeltasNew, lastDeltasOld, newAverage, newSum, oldAverage, oldSum;\n        lastDeltas = direction === -1 ? this.lastDownDeltas : this.lastUpDeltas;\n\n        if (lastDeltas[0] === null) {\n          return direction;\n        }\n\n        if (this.deltasTimestamp[this.stability * 2 - 2] + this.delay > Date.now() && lastDeltas[0] === lastDeltas[this.stability * 2 - 1]) {\n          return false;\n        }\n\n        lastDeltasOld = lastDeltas.slice(0, this.stability);\n        lastDeltasNew = lastDeltas.slice(this.stability, this.stability * 2);\n        oldSum = lastDeltasOld.reduce(function (t, s) {\n          return t + s;\n        });\n        newSum = lastDeltasNew.reduce(function (t, s) {\n          return t + s;\n        });\n        oldAverage = oldSum / lastDeltasOld.length;\n        newAverage = newSum / lastDeltasNew.length;\n\n        if (Math.abs(oldAverage) < Math.abs(newAverage * this.tolerance) && this.sensitivity < Math.abs(newAverage)) {\n          return direction;\n        } else {\n          return false;\n        }\n      };\n\n      Lethargy.prototype.showLastUpDeltas = function () {\n        return this.lastUpDeltas;\n      };\n\n      Lethargy.prototype.showLastDownDeltas = function () {\n        return this.lastDownDeltas;\n      };\n\n      return Lethargy;\n    }();\n  }).call(commonjsGlobal);\n});\n\nvar support = function getSupport() {\n  return {\n    hasWheelEvent: 'onwheel' in document,\n    hasMouseWheelEvent: 'onmousewheel' in document,\n    hasTouch: 'ontouchstart' in window || window.TouchEvent || window.DocumentTouch && document instanceof DocumentTouch,\n    hasTouchWin: navigator.msMaxTouchPoints && navigator.msMaxTouchPoints > 1,\n    hasPointer: !!window.navigator.msPointerEnabled,\n    hasKeyDown: 'onkeydown' in document,\n    isFirefox: navigator.userAgent.indexOf('Firefox') > -1\n  };\n}();\n\nvar toString = Object.prototype.toString,\n    hasOwnProperty$1 = Object.prototype.hasOwnProperty;\n\nvar bindallStandalone = function (object) {\n  if (!object) return console.warn('bindAll requires at least one argument.');\n  var functions = Array.prototype.slice.call(arguments, 1);\n\n  if (functions.length === 0) {\n    for (var method in object) {\n      if (hasOwnProperty$1.call(object, method)) {\n        if (typeof object[method] == 'function' && toString.call(object[method]) == \"[object Function]\") {\n          functions.push(method);\n        }\n      }\n    }\n  }\n\n  for (var i = 0; i < functions.length; i++) {\n    var f = functions[i];\n    object[f] = bind(object[f], object);\n  }\n};\n/*\n    Faster bind without specific-case checking. (see https://coderwall.com/p/oi3j3w).\n    bindAll is only needed for events binding so no need to make slow fixes for constructor\n    or partial application.\n*/\n\n\nfunction bind(func, context) {\n  return function () {\n    return func.apply(context, arguments);\n  };\n}\n\nvar Lethargy = lethargy.Lethargy;\nvar EVT_ID = 'virtualscroll';\nvar src = VirtualScroll;\nvar keyCodes = {\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  SPACE: 32\n};\n\nfunction VirtualScroll(options) {\n  bindallStandalone(this, '_onWheel', '_onMouseWheel', '_onTouchStart', '_onTouchMove', '_onKeyDown');\n  this.el = window;\n\n  if (options && options.el) {\n    this.el = options.el;\n    delete options.el;\n  }\n\n  this.options = objectAssign({\n    mouseMultiplier: 1,\n    touchMultiplier: 2,\n    firefoxMultiplier: 15,\n    keyStep: 120,\n    preventTouch: false,\n    unpreventTouchClass: 'vs-touchmove-allowed',\n    limitInertia: false,\n    useKeyboard: true,\n    useTouch: true\n  }, options);\n  if (this.options.limitInertia) this._lethargy = new Lethargy();\n  this._emitter = new tinyEmitter();\n  this._event = {\n    y: 0,\n    x: 0,\n    deltaX: 0,\n    deltaY: 0\n  };\n  this.touchStartX = null;\n  this.touchStartY = null;\n  this.bodyTouchAction = null;\n\n  if (this.options.passive !== undefined) {\n    this.listenerOptions = {\n      passive: this.options.passive\n    };\n  }\n}\n\nVirtualScroll.prototype._notify = function (e) {\n  var evt = this._event;\n  evt.x += evt.deltaX;\n  evt.y += evt.deltaY;\n\n  this._emitter.emit(EVT_ID, {\n    x: evt.x,\n    y: evt.y,\n    deltaX: evt.deltaX,\n    deltaY: evt.deltaY,\n    originalEvent: e\n  });\n};\n\nVirtualScroll.prototype._onWheel = function (e) {\n  var options = this.options;\n  if (this._lethargy && this._lethargy.check(e) === false) return;\n  var evt = this._event; // In Chrome and in Firefox (at least the new one)\n\n  evt.deltaX = e.wheelDeltaX || e.deltaX * -1;\n  evt.deltaY = e.wheelDeltaY || e.deltaY * -1; // for our purpose deltamode = 1 means user is on a wheel mouse, not touch pad\n  // real meaning: https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent#Delta_modes\n\n  if (support.isFirefox && e.deltaMode == 1) {\n    evt.deltaX *= options.firefoxMultiplier;\n    evt.deltaY *= options.firefoxMultiplier;\n  }\n\n  evt.deltaX *= options.mouseMultiplier;\n  evt.deltaY *= options.mouseMultiplier;\n\n  this._notify(e);\n};\n\nVirtualScroll.prototype._onMouseWheel = function (e) {\n  if (this.options.limitInertia && this._lethargy.check(e) === false) return;\n  var evt = this._event; // In Safari, IE and in Chrome if 'wheel' isn't defined\n\n  evt.deltaX = e.wheelDeltaX ? e.wheelDeltaX : 0;\n  evt.deltaY = e.wheelDeltaY ? e.wheelDeltaY : e.wheelDelta;\n\n  this._notify(e);\n};\n\nVirtualScroll.prototype._onTouchStart = function (e) {\n  var t = e.targetTouches ? e.targetTouches[0] : e;\n  this.touchStartX = t.pageX;\n  this.touchStartY = t.pageY;\n};\n\nVirtualScroll.prototype._onTouchMove = function (e) {\n  var options = this.options;\n\n  if (options.preventTouch && !e.target.classList.contains(options.unpreventTouchClass)) {\n    e.preventDefault();\n  }\n\n  var evt = this._event;\n  var t = e.targetTouches ? e.targetTouches[0] : e;\n  evt.deltaX = (t.pageX - this.touchStartX) * options.touchMultiplier;\n  evt.deltaY = (t.pageY - this.touchStartY) * options.touchMultiplier;\n  this.touchStartX = t.pageX;\n  this.touchStartY = t.pageY;\n\n  this._notify(e);\n};\n\nVirtualScroll.prototype._onKeyDown = function (e) {\n  var evt = this._event;\n  evt.deltaX = evt.deltaY = 0;\n  var windowHeight = window.innerHeight - 40;\n\n  switch (e.keyCode) {\n    case keyCodes.LEFT:\n    case keyCodes.UP:\n      evt.deltaY = this.options.keyStep;\n      break;\n\n    case keyCodes.RIGHT:\n    case keyCodes.DOWN:\n      evt.deltaY = -this.options.keyStep;\n      break;\n\n    case e.shiftKey:\n      evt.deltaY = windowHeight;\n      break;\n\n    case keyCodes.SPACE:\n      evt.deltaY = -windowHeight;\n      break;\n\n    default:\n      return;\n  }\n\n  this._notify(e);\n};\n\nVirtualScroll.prototype._bind = function () {\n  if (support.hasWheelEvent) this.el.addEventListener('wheel', this._onWheel, this.listenerOptions);\n  if (support.hasMouseWheelEvent) this.el.addEventListener('mousewheel', this._onMouseWheel, this.listenerOptions);\n\n  if (support.hasTouch && this.options.useTouch) {\n    this.el.addEventListener('touchstart', this._onTouchStart, this.listenerOptions);\n    this.el.addEventListener('touchmove', this._onTouchMove, this.listenerOptions);\n  }\n\n  if (support.hasPointer && support.hasTouchWin) {\n    this.bodyTouchAction = document.body.style.msTouchAction;\n    document.body.style.msTouchAction = 'none';\n    this.el.addEventListener('MSPointerDown', this._onTouchStart, true);\n    this.el.addEventListener('MSPointerMove', this._onTouchMove, true);\n  }\n\n  if (support.hasKeyDown && this.options.useKeyboard) document.addEventListener('keydown', this._onKeyDown);\n};\n\nVirtualScroll.prototype._unbind = function () {\n  if (support.hasWheelEvent) this.el.removeEventListener('wheel', this._onWheel);\n  if (support.hasMouseWheelEvent) this.el.removeEventListener('mousewheel', this._onMouseWheel);\n\n  if (support.hasTouch) {\n    this.el.removeEventListener('touchstart', this._onTouchStart);\n    this.el.removeEventListener('touchmove', this._onTouchMove);\n  }\n\n  if (support.hasPointer && support.hasTouchWin) {\n    document.body.style.msTouchAction = this.bodyTouchAction;\n    this.el.removeEventListener('MSPointerDown', this._onTouchStart, true);\n    this.el.removeEventListener('MSPointerMove', this._onTouchMove, true);\n  }\n\n  if (support.hasKeyDown && this.options.useKeyboard) document.removeEventListener('keydown', this._onKeyDown);\n};\n\nVirtualScroll.prototype.on = function (cb, ctx) {\n  this._emitter.on(EVT_ID, cb, ctx);\n\n  var events = this._emitter.e;\n  if (events && events[EVT_ID] && events[EVT_ID].length === 1) this._bind();\n};\n\nVirtualScroll.prototype.off = function (cb, ctx) {\n  this._emitter.off(EVT_ID, cb, ctx);\n\n  var events = this._emitter.e;\n  if (!events[EVT_ID] || events[EVT_ID].length <= 0) this._unbind();\n};\n\nVirtualScroll.prototype.reset = function () {\n  var evt = this._event;\n  evt.x = 0;\n  evt.y = 0;\n};\n\nVirtualScroll.prototype.destroy = function () {\n  this._emitter.off();\n\n  this._unbind();\n};\n\nfunction lerp(start, end, amt) {\n  return (1 - amt) * start + amt * end;\n}\n\nfunction getTranslate(el) {\n  var translate = {};\n  if (!window.getComputedStyle) return;\n  var style = getComputedStyle(el);\n  var transform = style.transform || style.webkitTransform || style.mozTransform;\n  var mat = transform.match(/^matrix3d\\((.+)\\)$/);\n\n  if (mat) {\n    translate.x = mat ? parseFloat(mat[1].split(', ')[12]) : 0;\n    translate.y = mat ? parseFloat(mat[1].split(', ')[13]) : 0;\n  } else {\n    mat = transform.match(/^matrix\\((.+)\\)$/);\n    translate.x = mat ? parseFloat(mat[1].split(', ')[4]) : 0;\n    translate.y = mat ? parseFloat(mat[1].split(', ')[5]) : 0;\n  }\n\n  return translate;\n}\n/**\n * Returns an array containing all the parent nodes of the given node\n * @param  {object} node\n * @return {array} parent nodes\n */\n\n\nfunction getParents(elem) {\n  // Set up a parent array\n  var parents = []; // Push each parent element to the array\n\n  for (; elem && elem !== document; elem = elem.parentNode) {\n    parents.push(elem);\n  } // Return our parent array\n\n\n  return parents;\n} // https://gomakethings.com/how-to-get-the-closest-parent-element-with-a-matching-selector-using-vanilla-javascript/\n\n/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\n\n\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\n\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\n\nfunction C(aA1) {\n  return 3.0 * aA1;\n} // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n\n\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n} // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n\n\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX,\n      currentT,\n      i = 0;\n\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n\n  return aGuessT;\n}\n\nfunction LinearEasing(x) {\n  return x;\n}\n\nvar src$1 = function bezier(mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  } // Precompute samples table\n\n\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n  for (var i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n\n    --currentSample; // Interpolate to provide an initial guess for t\n\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing(x) {\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n\n    if (x === 1) {\n      return 1;\n    }\n\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};\n\nvar keyCodes$1 = {\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  SPACE: 32,\n  TAB: 9,\n  PAGEUP: 33,\n  PAGEDOWN: 34,\n  HOME: 36,\n  END: 35\n};\n\nvar _default$2 = /*#__PURE__*/function (_Core) {\n  _inherits(_default, _Core);\n\n  function _default() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, _default);\n\n    window.scrollTo(0, 0);\n    history.scrollRestoration = 'manual';\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_default).call(this, options));\n    if (_this.inertia) _this.lerp = _this.inertia * 0.1;\n    _this.isScrolling = false;\n    _this.isDraggingScrollbar = false;\n    _this.isTicking = false;\n    _this.hasScrollTicking = false;\n    _this.parallaxElements = [];\n    _this.stop = false;\n    _this.scrollbarContainer = options.scrollbarContainer;\n    _this.checkKey = _this.checkKey.bind(_assertThisInitialized(_this));\n    window.addEventListener('keydown', _this.checkKey, false);\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      this.html.classList.add(this.smoothClass);\n      this.instance = _objectSpread2({\n        delta: {\n          x: 0,\n          y: 0\n        }\n      }, this.instance);\n      this.vs = new src({\n        el: this.scrollFromAnywhere ? document : this.el,\n        mouseMultiplier: navigator.platform.indexOf('Win') > -1 ? 1 : 0.4,\n        firefoxMultiplier: this.firefoxMultiplier,\n        touchMultiplier: this.touchMultiplier,\n        useKeyboard: false,\n        passive: true\n      });\n      this.vs.on(function (e) {\n        if (_this2.stop) {\n          return;\n        }\n\n        if (!_this2.isTicking && !_this2.isDraggingScrollbar) {\n          requestAnimationFrame(function () {\n            _this2.updateDelta(e);\n\n            if (!_this2.isScrolling) _this2.startScrolling();\n          });\n          _this2.isTicking = true;\n        }\n\n        _this2.isTicking = false;\n      });\n      this.setScrollLimit();\n      this.initScrollBar();\n      this.addSections();\n      this.addElements();\n      this.detectElements();\n      this.transformElements(true, true);\n      this.checkScroll(true);\n\n      _get(_getPrototypeOf(_default.prototype), \"init\", this).call(this);\n    }\n  }, {\n    key: \"setScrollLimit\",\n    value: function setScrollLimit() {\n      this.instance.limit = this.el.offsetHeight - this.windowHeight;\n    }\n  }, {\n    key: \"startScrolling\",\n    value: function startScrolling() {\n      this.isScrolling = true;\n      this.checkScroll();\n      this.html.classList.add(this.scrollingClass);\n    }\n  }, {\n    key: \"stopScrolling\",\n    value: function stopScrolling() {\n      if (this.scrollToRaf) {\n        cancelAnimationFrame(this.scrollToRaf);\n        this.scrollToRaf = null;\n      }\n\n      this.isScrolling = false;\n      this.instance.scroll.y = Math.round(this.instance.scroll.y);\n      this.html.classList.remove(this.scrollingClass);\n    }\n  }, {\n    key: \"checkKey\",\n    value: function checkKey(e) {\n      var _this3 = this;\n\n      if (this.stop) {\n        // If we are stopped, we don't want any scroll to occur because of a keypress\n        // Prevent tab to scroll to activeElement\n        if (e.keyCode == keyCodes$1.TAB) {\n          requestAnimationFrame(function () {\n            // Make sure native scroll is always at top of page\n            _this3.html.scrollTop = 0;\n            document.body.scrollTop = 0;\n          });\n        }\n\n        return;\n      }\n\n      switch (e.keyCode) {\n        case keyCodes$1.TAB:\n          // Do not remove the RAF\n          // It allows to override the browser's native scrollTo, which is essential\n          requestAnimationFrame(function () {\n            // Make sure native scroll is always at top of page\n            _this3.html.scrollTop = 0;\n            document.body.scrollTop = 0; // Request scrollTo on the focusedElement, putting it at the center of the screen\n\n            _this3.scrollTo(document.activeElement, -window.innerHeight / 2);\n          });\n          break;\n\n        case keyCodes$1.UP:\n          this.instance.delta.y -= 240;\n          break;\n\n        case keyCodes$1.DOWN:\n          this.instance.delta.y += 240;\n          break;\n\n        case keyCodes$1.PAGEUP:\n          this.instance.delta.y -= window.innerHeight;\n          break;\n\n        case keyCodes$1.PAGEDOWN:\n          this.instance.delta.y += window.innerHeight;\n          break;\n\n        case keyCodes$1.HOME:\n          this.instance.delta.y -= this.instance.limit;\n          break;\n\n        case keyCodes$1.END:\n          this.instance.delta.y += this.instance.limit;\n          break;\n\n        case keyCodes$1.SPACE:\n          if (!(document.activeElement instanceof HTMLInputElement) && !(document.activeElement instanceof HTMLTextAreaElement)) {\n            if (e.shiftKey) {\n              this.instance.delta.y -= window.innerHeight;\n            } else {\n              this.instance.delta.y += window.innerHeight;\n            }\n          }\n\n          break;\n\n        default:\n          return;\n      }\n\n      if (this.instance.delta.y < 0) this.instance.delta.y = 0;\n      if (this.instance.delta.y > this.instance.limit) this.instance.delta.y = this.instance.limit;\n      this.isScrolling = true;\n      this.checkScroll();\n      this.html.classList.add(this.scrollingClass);\n    }\n  }, {\n    key: \"checkScroll\",\n    value: function checkScroll() {\n      var _this4 = this;\n\n      var forced = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (forced || this.isScrolling || this.isDraggingScrollbar) {\n        if (!this.hasScrollTicking) {\n          requestAnimationFrame(function () {\n            return _this4.checkScroll();\n          });\n          this.hasScrollTicking = true;\n        }\n\n        this.updateScroll();\n        var distance = Math.abs(this.instance.delta.y - this.instance.scroll.y);\n\n        if (!this.animatingScroll && (distance < 0.5 && this.instance.delta.y != 0 || distance < 0.5 && this.instance.delta.y == 0)) {\n          this.stopScrolling();\n        }\n\n        for (var i = this.sections.length - 1; i >= 0; i--) {\n          if (this.sections[i].persistent || this.instance.scroll.y > this.sections[i].offset && this.instance.scroll.y < this.sections[i].limit) {\n            this.transform(this.sections[i].el, 0, -this.instance.scroll.y);\n\n            if (!this.sections[i].inView) {\n              this.sections[i].inView = true;\n              this.sections[i].el.style.opacity = 1;\n              this.sections[i].el.style.pointerEvents = 'all';\n              this.sections[i].el.setAttribute(\"data-\".concat(this.name, \"-section-inview\"), '');\n            }\n          } else {\n            if (this.sections[i].inView) {\n              this.sections[i].inView = false;\n              this.sections[i].el.style.opacity = 0;\n              this.sections[i].el.style.pointerEvents = 'none';\n              this.sections[i].el.removeAttribute(\"data-\".concat(this.name, \"-section-inview\"));\n            }\n\n            this.transform(this.sections[i].el, 0, 0);\n          }\n        }\n\n        if (this.getDirection) {\n          this.addDirection();\n        }\n\n        if (this.getSpeed) {\n          this.addSpeed();\n          this.timestamp = Date.now();\n        }\n\n        this.detectElements();\n        this.transformElements();\n        var scrollBarTranslation = this.instance.scroll.y / this.instance.limit * this.scrollBarLimit;\n        this.transform(this.scrollbarThumb, 0, scrollBarTranslation);\n\n        _get(_getPrototypeOf(_default.prototype), \"checkScroll\", this).call(this);\n\n        this.hasScrollTicking = false;\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      this.windowHeight = window.innerHeight;\n      this.windowMiddle = this.windowHeight / 2;\n      this.update();\n    }\n  }, {\n    key: \"updateDelta\",\n    value: function updateDelta(e) {\n      this.instance.delta.y -= e.deltaY * this.multiplier;\n      if (this.instance.delta.y < 0) this.instance.delta.y = 0;\n      if (this.instance.delta.y > this.instance.limit) this.instance.delta.y = this.instance.limit;\n    }\n  }, {\n    key: \"updateScroll\",\n    value: function updateScroll(e) {\n      if (this.isScrolling || this.isDraggingScrollbar) {\n        this.instance.scroll.y = lerp(this.instance.scroll.y, this.instance.delta.y, this.lerp);\n      } else {\n        if (this.instance.scroll.y > this.instance.limit) {\n          this.setScroll(this.instance.scroll.x, this.instance.limit);\n        } else if (this.instance.scroll.y < 0) {\n          this.setScroll(this.instance.scroll.x, 0);\n        } else {\n          this.setScroll(this.instance.scroll.x, this.instance.delta.y);\n        }\n      }\n    }\n  }, {\n    key: \"addDirection\",\n    value: function addDirection() {\n      if (this.instance.delta.y > this.instance.scroll.y) {\n        if (this.instance.direction !== 'down') {\n          this.instance.direction = 'down';\n        }\n      } else if (this.instance.delta.y < this.instance.scroll.y) {\n        if (this.instance.direction !== 'up') {\n          this.instance.direction = 'up';\n        }\n      }\n    }\n  }, {\n    key: \"addSpeed\",\n    value: function addSpeed() {\n      if (this.instance.delta.y != this.instance.scroll.y) {\n        this.instance.speed = (this.instance.delta.y - this.instance.scroll.y) / Math.max(1, Date.now() - this.timestamp);\n      } else {\n        this.instance.speed = 0;\n      }\n    }\n  }, {\n    key: \"initScrollBar\",\n    value: function initScrollBar() {\n      this.scrollbar = document.createElement('span');\n      this.scrollbarThumb = document.createElement('span');\n      this.scrollbar.classList.add(\"\".concat(this.scrollbarClass));\n      this.scrollbarThumb.classList.add(\"\".concat(this.scrollbarClass, \"_thumb\"));\n      this.scrollbar.append(this.scrollbarThumb);\n\n      if (this.scrollbarContainer) {\n        this.scrollbarContainer.append(this.scrollbar);\n      } else {\n        document.body.append(this.scrollbar);\n      } // Scrollbar Events\n\n\n      this.getScrollBar = this.getScrollBar.bind(this);\n      this.releaseScrollBar = this.releaseScrollBar.bind(this);\n      this.moveScrollBar = this.moveScrollBar.bind(this);\n      this.scrollbarThumb.addEventListener('mousedown', this.getScrollBar);\n      window.addEventListener('mouseup', this.releaseScrollBar);\n      window.addEventListener('mousemove', this.moveScrollBar); // Set scrollbar values\n\n      if (this.instance.limit + this.windowHeight <= this.windowHeight) {\n        return;\n      }\n\n      this.scrollbarBCR = this.scrollbar.getBoundingClientRect();\n      this.scrollbarHeight = this.scrollbarBCR.height;\n      this.scrollbarThumb.style.height = \"\".concat(this.scrollbarHeight * this.scrollbarHeight / (this.instance.limit + this.scrollbarHeight), \"px\");\n      this.scrollBarLimit = this.scrollbarHeight - this.scrollbarThumb.getBoundingClientRect().height;\n    }\n  }, {\n    key: \"reinitScrollBar\",\n    value: function reinitScrollBar() {\n      if (this.instance.limit + this.windowHeight <= this.windowHeight) {\n        return;\n      }\n\n      this.scrollbarBCR = this.scrollbar.getBoundingClientRect();\n      this.scrollbarHeight = this.scrollbarBCR.height;\n      this.scrollbarThumb.style.height = \"\".concat(this.scrollbarHeight * this.scrollbarHeight / (this.instance.limit + this.scrollbarHeight), \"px\");\n      this.scrollBarLimit = this.scrollbarHeight - this.scrollbarThumb.getBoundingClientRect().height;\n    }\n  }, {\n    key: \"destroyScrollBar\",\n    value: function destroyScrollBar() {\n      this.scrollbarThumb.removeEventListener('mousedown', this.getScrollBar);\n      window.removeEventListener('mouseup', this.releaseScrollBar);\n      window.removeEventListener('mousemove', this.moveScrollBar);\n      this.scrollbar.remove();\n    }\n  }, {\n    key: \"getScrollBar\",\n    value: function getScrollBar(e) {\n      this.isDraggingScrollbar = true;\n      this.checkScroll();\n      this.html.classList.remove(this.scrollingClass);\n      this.html.classList.add(this.draggingClass);\n    }\n  }, {\n    key: \"releaseScrollBar\",\n    value: function releaseScrollBar(e) {\n      this.isDraggingScrollbar = false;\n      this.html.classList.add(this.scrollingClass);\n      this.html.classList.remove(this.draggingClass);\n    }\n  }, {\n    key: \"moveScrollBar\",\n    value: function moveScrollBar(e) {\n      var _this5 = this;\n\n      if (!this.isTicking && this.isDraggingScrollbar) {\n        requestAnimationFrame(function () {\n          var y = (e.clientY - _this5.scrollbarBCR.top) * 100 / _this5.scrollbarHeight * _this5.instance.limit / 100;\n\n          if (y > 0 && y < _this5.instance.limit) {\n            _this5.instance.delta.y = y;\n          }\n        });\n        this.isTicking = true;\n      }\n\n      this.isTicking = false;\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      var _this6 = this;\n\n      this.els = [];\n      this.parallaxElements = [];\n      this.sections.forEach(function (section, y) {\n        var els = _this6.sections[y].el.querySelectorAll(\"[data-\".concat(_this6.name, \"]\"));\n\n        els.forEach(function (el, id) {\n          var cl = el.dataset[_this6.name + 'Class'] || _this6[\"class\"];\n          var top;\n          var repeat = el.dataset[_this6.name + 'Repeat'];\n          var call = el.dataset[_this6.name + 'Call'];\n          var position = el.dataset[_this6.name + 'Position'];\n          var delay = el.dataset[_this6.name + 'Delay'];\n          var direction = el.dataset[_this6.name + 'Direction'];\n          var sticky = typeof el.dataset[_this6.name + 'Sticky'] === 'string';\n          var speed = el.dataset[_this6.name + 'Speed'] ? parseFloat(el.dataset[_this6.name + 'Speed']) / 10 : false;\n          var offset = typeof el.dataset[_this6.name + 'Offset'] === 'string' ? el.dataset[_this6.name + 'Offset'].split(',') : _this6.offset;\n          var target = el.dataset[_this6.name + 'Target'];\n          var targetEl;\n\n          if (target !== undefined) {\n            targetEl = document.querySelector(\"\".concat(target));\n          } else {\n            targetEl = el;\n          }\n\n          if (!_this6.sections[y].inView) {\n            top = targetEl.getBoundingClientRect().top - getTranslate(_this6.sections[y].el).y - getTranslate(targetEl).y;\n          } else {\n            top = targetEl.getBoundingClientRect().top + _this6.instance.scroll.y - getTranslate(targetEl).y;\n          }\n\n          var bottom = top + targetEl.offsetHeight;\n          var middle = (bottom - top) / 2 + top;\n\n          if (sticky) {\n            var elTop = el.getBoundingClientRect().top;\n            var elDistance = elTop - top;\n            top += window.innerHeight;\n            bottom = elTop + targetEl.offsetHeight - el.offsetHeight - elDistance;\n            middle = (bottom - top) / 2 + top;\n          }\n\n          if (repeat == 'false') {\n            repeat = false;\n          } else if (repeat != undefined) {\n            repeat = true;\n          } else {\n            repeat = _this6.repeat;\n          }\n\n          var relativeOffset = [0, 0];\n\n          if (offset) {\n            for (var i = 0; i < offset.length; i++) {\n              if (typeof offset[i] == 'string') {\n                if (offset[i].includes('%')) {\n                  relativeOffset[i] = parseInt(offset[i].replace('%', '') * _this6.windowHeight / 100);\n                } else {\n                  relativeOffset[i] = parseInt(offset[i]);\n                }\n              } else {\n                relativeOffset[i] = offset[i];\n              }\n            }\n          }\n\n          var mappedEl = {\n            el: el,\n            id: id,\n            \"class\": cl,\n            top: top + relativeOffset[0],\n            middle: middle,\n            bottom: bottom - relativeOffset[1],\n            offset: offset,\n            repeat: repeat,\n            inView: el.classList.contains(cl) ? true : false,\n            call: call,\n            speed: speed,\n            delay: delay,\n            position: position,\n            target: targetEl,\n            direction: direction,\n            sticky: sticky\n          };\n\n          _this6.els.push(mappedEl);\n\n          if (speed !== false || sticky) {\n            _this6.parallaxElements.push(mappedEl);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"addSections\",\n    value: function addSections() {\n      var _this7 = this;\n\n      this.sections = [];\n      var sections = this.el.querySelectorAll(\"[data-\".concat(this.name, \"-section]\"));\n\n      if (sections.length === 0) {\n        sections = [this.el];\n      }\n\n      sections.forEach(function (section, i) {\n        var offset = section.getBoundingClientRect().top - window.innerHeight * 1.5 - getTranslate(section).y;\n        var limit = offset + section.getBoundingClientRect().height + window.innerHeight * 2;\n        var persistent = typeof section.dataset[_this7.name + 'Persistent'] === 'string';\n        var mappedSection = {\n          el: section,\n          offset: offset,\n          limit: limit,\n          inView: false,\n          persistent: persistent\n        };\n        _this7.sections[i] = mappedSection;\n      });\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(element, x, y, delay) {\n      var transform;\n\n      if (!delay) {\n        transform = \"matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,\".concat(x, \",\").concat(y, \",0,1)\");\n      } else {\n        var start = getTranslate(element);\n        var lerpX = lerp(start.x, x, delay);\n        var lerpY = lerp(start.y, y, delay);\n        transform = \"matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,\".concat(lerpX, \",\").concat(lerpY, \",0,1)\");\n      }\n\n      element.style.webkitTransform = transform;\n      element.style.msTransform = transform;\n      element.style.transform = transform;\n    }\n  }, {\n    key: \"transformElements\",\n    value: function transformElements(isForced) {\n      var _this8 = this;\n\n      var setAllElements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var scrollBottom = this.instance.scroll.y + this.windowHeight;\n      var scrollMiddle = this.instance.scroll.y + this.windowMiddle;\n      this.parallaxElements.forEach(function (current, i) {\n        var transformDistance = false;\n\n        if (isForced) {\n          transformDistance = 0;\n        }\n\n        if (current.inView || setAllElements) {\n          switch (current.position) {\n            case 'top':\n              transformDistance = _this8.instance.scroll.y * -current.speed;\n              break;\n\n            case 'elementTop':\n              transformDistance = (scrollBottom - current.top) * -current.speed;\n              break;\n\n            case 'bottom':\n              transformDistance = (_this8.instance.limit - scrollBottom + _this8.windowHeight) * current.speed;\n              break;\n\n            default:\n              transformDistance = (scrollMiddle - current.middle) * -current.speed;\n              break;\n          }\n        }\n\n        if (current.sticky) {\n          if (current.inView) {\n            transformDistance = _this8.instance.scroll.y - current.top + window.innerHeight;\n          } else {\n            if (_this8.instance.scroll.y < current.top - window.innerHeight && _this8.instance.scroll.y < current.top - window.innerHeight / 2) {\n              transformDistance = 0;\n            } else if (_this8.instance.scroll.y > current.bottom && _this8.instance.scroll.y > current.bottom + 100) {\n              transformDistance = current.bottom - current.top + window.innerHeight;\n            } else {\n              transformDistance = false;\n            }\n          }\n        }\n\n        if (transformDistance !== false) {\n          if (current.direction === 'horizontal') {\n            _this8.transform(current.el, transformDistance, 0, isForced ? false : current.delay);\n          } else {\n            _this8.transform(current.el, 0, transformDistance, isForced ? false : current.delay);\n          }\n        }\n      });\n    }\n    /**\n     * Scroll to a desired target.\n     *\n     * @param  Available options :\n     *          targetOption {node, string, \"top\", \"bottom\", int} - The DOM element we want to scroll to\n     *          offsetOption {int} - An offset to apply on top of given `target` or `sourceElem`'s target\n     *          duration {int} - Duration of the scroll animation in milliseconds\n     *          easing {array} - An array of 4 floats between 0 and 1 defining the bezier curve for the animation's easing. See http://greweb.me/bezier-easing-editor/example/\n     * @return {void}\n     */\n\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(targetOption, offsetOption) {\n      var _this9 = this;\n\n      var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n      var easing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0.25, 0.00, 0.35, 1.00];\n      var disableLerp = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var callback = arguments.length > 5 ? arguments[5] : undefined; // TODO - In next breaking update, use an object as 2nd parameter for options (offset, duration, easing, disableLerp, callback)\n\n      var target;\n      var offset = offsetOption ? parseInt(offsetOption) : 0;\n      easing = src$1.apply(void 0, _toConsumableArray(easing));\n\n      if (typeof targetOption === 'string') {\n        // Selector or boundaries\n        if (targetOption === 'top') {\n          target = 0;\n        } else if (targetOption === 'bottom') {\n          target = this.instance.limit;\n        } else {\n          target = document.querySelector(targetOption); // If the query fails, abort\n\n          if (!target) {\n            return;\n          }\n        }\n      } else if (typeof targetOption === 'number') {\n        // Absolute coordinate\n        target = parseInt(targetOption);\n      } else if (targetOption && targetOption.tagName) {\n        // DOM Element\n        target = targetOption;\n      } else {\n        console.warn('`targetOption` parameter is not valid');\n        return;\n      } // We have a target that is not a coordinate yet, get it\n\n\n      if (typeof target !== 'number') {\n        // Verify the given target belongs to this scroll scope\n        var targetInScope = getParents(target).includes(this.el);\n\n        if (!targetInScope) {\n          // If the target isn't inside our main element, abort any action\n          return;\n        } // Get target offset from top\n\n\n        var targetBCR = target.getBoundingClientRect();\n        var offsetTop = targetBCR.top; // Try and find the target's parent section\n\n        var targetParents = getParents(target);\n        var parentSection = targetParents.find(function (candidate) {\n          return _this9.sections.find(function (section) {\n            return section.el == candidate;\n          });\n        });\n        var parentSectionOffset = 0;\n\n        if (parentSection) {\n          parentSectionOffset = getTranslate(parentSection).y; // We got a parent section, store it's current offset to remove it later\n        } // Final value of scroll destination : offsetTop + (optional offset given in options) - (parent's section translate)\n\n\n        offset = offsetTop + offset - parentSectionOffset;\n      } else {\n        offset = target + offset;\n      } // Actual scrollto\n      // ==========================================================================\n      // Setup\n\n\n      var scrollStart = parseFloat(this.instance.delta.y);\n      var scrollTarget = Math.max(0, Math.min(offset, this.instance.limit)); // Make sure our target is in the scroll boundaries\n\n      var scrollDiff = scrollTarget - scrollStart;\n\n      var render = function render(p) {\n        if (disableLerp) _this9.setScroll(_this9.instance.delta.x, scrollStart + scrollDiff * p);else _this9.instance.delta.y = scrollStart + scrollDiff * p;\n      }; // Prepare the scroll\n\n\n      this.animatingScroll = true; // This boolean allows to prevent `checkScroll()` from calling `stopScrolling` when the animation is slow (i.e. at the beginning of an EaseIn)\n\n      this.stopScrolling(); // Stop any movement, allows to kill any other `scrollTo` still happening\n\n      this.startScrolling(); // Restart the scroll\n      // Start the animation loop\n\n      var start = Date.now();\n\n      var loop = function loop() {\n        var p = (Date.now() - start) / duration; // Animation progress\n\n        if (p > 1) {\n          // Animation ends\n          render(1);\n          _this9.animatingScroll = false;\n          if (duration == 0) _this9.update();\n          if (callback) callback();\n        } else {\n          _this9.scrollToRaf = requestAnimationFrame(loop);\n          render(easing(p));\n        }\n      };\n\n      loop();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.setScrollLimit();\n      this.addSections();\n      this.addElements();\n      this.detectElements();\n      this.updateScroll();\n      this.transformElements(true);\n      this.reinitScrollBar();\n      this.checkScroll(true);\n    }\n  }, {\n    key: \"startScroll\",\n    value: function startScroll() {\n      this.stop = false;\n    }\n  }, {\n    key: \"stopScroll\",\n    value: function stopScroll() {\n      this.stop = true;\n    }\n  }, {\n    key: \"setScroll\",\n    value: function setScroll(x, y) {\n      this.instance = _objectSpread2({}, this.instance, {\n        scroll: {\n          x: x,\n          y: y\n        },\n        delta: {\n          x: x,\n          y: y\n        },\n        speed: 0\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(_default.prototype), \"destroy\", this).call(this);\n\n      this.stopScrolling();\n      this.html.classList.remove(this.smoothClass);\n      this.vs.destroy();\n      this.destroyScrollBar();\n      window.removeEventListener('keydown', this.checkKey, false);\n    }\n  }]);\n\n  return _default;\n}(_default);\n\nvar _default$3 = /*#__PURE__*/function () {\n  function _default() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, _default);\n\n    this.options = options;\n    Object.assign(this, defaults, options);\n    this.init();\n  }\n\n  _createClass(_default, [{\n    key: \"init\",\n    value: function init() {\n      if (!this.smoothMobile) {\n        this.isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;\n      }\n\n      if (this.smooth === true && !this.isMobile) {\n        this.scroll = new _default$2(this.options);\n      } else {\n        this.scroll = new _default$1(this.options);\n      }\n\n      this.scroll.init();\n\n      if (window.location.hash) {\n        // Get the hash without the '#' and find the matching element\n        var id = window.location.hash.slice(1, window.location.hash.length);\n        var target = document.getElementById(id); // If found, scroll to the element\n\n        if (target) this.scroll.scrollTo(target);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.scroll.update();\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.scroll.startScroll();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.scroll.stopScroll();\n    }\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(target, offset, duration, easing, disableLerp, callback) {\n      // TODO - In next breaking update, use an object as 2nd parameter for options (offset, duration, easing, disableLerp, callback)\n      this.scroll.scrollTo(target, offset, duration, easing, disableLerp, callback);\n    }\n  }, {\n    key: \"setScroll\",\n    value: function setScroll(x, y) {\n      this.scroll.setScroll(x, y);\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, func) {\n      this.scroll.setEvents(event, func);\n    }\n  }, {\n    key: \"off\",\n    value: function off(event, func) {\n      this.scroll.unsetEvents(event, func);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.scroll.destroy();\n    }\n  }]);\n\n  return _default;\n}();\n\nvar _default2 = _default$3;\nexports.default = _default2;"},"sourceMaps":null,"error":null,"hash":"4b247e7a5b4329754dd6477467cbd3ae","cacheData":{"env":{}}}